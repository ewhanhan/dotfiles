############################ Shell & Editor Configuration ############################

# Framework and tool management
alias zimU="zimfw install -v; zimfw uninstall -v; zimfw update -v; zimfw upgrade -v"
alias claude="~/.claude/local/claude"

# Editor aliases
alias vim="nvim"
alias vi="nvim"
alias nvimU='nvim --headless "+Lazy! sync" "+TSUpdateSync all" +qa'
alias codeU='code --update-extensions'

# Shell utilities
alias EDITOR="code --wait"
alias c="clear"
alias s="exec $SHELL -l"

############################ File & Directory Operations ############################

# File listing with eza
alias l="eza --icons --show-symlinks -a --group-directories-first"
alias ls="l -l"
alias ll="l -lF"
alias lsa="l -lF"
alias lr='ll -T'              # Long format, recursive as a tree
alias lx='ll -sextension'     # Long format, sort by extension
alias lk='ll -ssize'          # Long format, largest file size last
alias lt='ll -smodified'      # Long format, newest modification time last
alias lc='ll -schanged'       # Long format, newest status change (ctime) last

# Directory navigation shortcuts
alias ...=../..
alias ....=../../..
alias .....=../../../..
alias ......=../../../../..
alias 1='cd -1'
alias 2='cd -2'
alias 3='cd -3'
alias 4='cd -4'
alias 5='cd -5'
alias 6='cd -6'
alias 7='cd -7'
alias 8='cd -8'
alias 9='cd -9'

# System utilities
alias _='sudo'

############################ System & Package Management ############################

# macOS system updates
alias macU="softwareupdate -i -a --no-scan --agree-to-license"

# Master update command
# alias uuu="zimU & tpmU & brewup & npmU & mas upgrade & wait; macU; s"

# Homebrew management
alias buz="brew uninstall --zap"
alias brewup="brew update; brew upgrade; brew autoremove; brew cleanup --prune=all; brew doctor;"
alias brewdump="brew bundle dump --file=~/.dotfiles/Homebrew/Brewfile --force"

# Cache management
alias cacheD="rm -rf ~/Library/Caches/*;"
alias cacheS="du -sh ~/Library/Caches"

############################ Development Tools ############################

# Git tools
alias lg="lazygit"

local gprefix="g"
alias ${gprefix}='git'

# tmux and plugin management
local tpmPrefix="tpm"
alias ${tpmPrefix}S="tmux source-file ~/.tmux.conf"
alias ${tpmPrefix}I='~/.tmux/plugins/tpm/bin/install_plugins'
alias ${tpmPrefix}C='~/.tmux/plugins/tpm/bin/clean_plugins'
alias ${tpmPrefix}U='~/.tmux/plugins/tpm/bin/update_plugins all'

############################ Node.js & npm ############################

# Basic npm shortcuts
alias N="npm run"
alias npmG="npm list -g --depth=0"

# npm package installation
alias npmg="npm i -g "              # Install dependencies globally
alias npmS="npm i -S "              # Install and save to dependencies
alias npmD="npm i -D "              # Install and save to dev-dependencies  
alias npmF='npm i -f'               # Force npm to fetch remote resources

# npm utility commands

# npm script shortcuts
alias npmst="N start"             # Run npm start
alias npmt="N test"               # Run npm test
alias npmR="N"                # Run npm scripts
alias npmrd="N dev"           # Run npm run dev
alias npmrb="N build"         # Run npm run build

# npm-check-updates (conditional)
if (( ${+commands[ncu]} )); then
  alias ncu-patch="ncu -i --target patch --concurrency 12"
  alias ncu-minor="ncu -i --target minor --concurrency 12"
fi

# Global npm package updater function
npmU() {
    echo "Checking for updates for globally installed npm packages..."
    ncu -g --concurrency 12 |
        {
            echo "Searching for globally installed npm packages..."
            # Use Ripgrep (rg) to extract lines containing npm global packages
            # -o flag is used to only output the matched parts of the line
            # --only-matching flag disables the default behavior of showing the whole matching line
            # Pattern 'npm -g.*' matches lines containing npm global packages
            while read -r line; do
                # Display the matched npm package name
                echo -e "\n"
                printf "Found npm package: $line"
                # Execute each line as a command
                sh -c "$line"
                # Provide feedback after executing the command
                echo "Executed update command for $line"
            done < <(rg -o --only-matching 'npm -g.*')
            echo "Update check and execution completed."
        }
}

############################ Python Development ############################

# Python basics
alias python="python3"
builtin which py > /dev/null || alias py='python3'

# Python utilities
alias pygrep='grep -nr --include="*.py"'  # Find python files
alias pyserver="python3 -m http.server"   # Quick HTTP server

# pip package management
alias pipi="pip3 install"                  # Install package
alias pipu="pip3 install --upgrade"        # Upgrade package
alias pipun="pip3 uninstall"               # Uninstall package
alias pipgi="pip3 freeze | grep"           # Search installed packages
alias piplo="pip3 list -o"                 # List outdated packages
alias pipreq="pip3 freeze > requirements.txt"  # Export requirements
alias pipir="pip3 install -r requirements.txt" # Install from requirements

# Python environment cleanup function
function pyclean() {
  find "${@:-.}" -type f -name "*.py[co]" -delete
  find "${@:-.}" -type d -name "__pycache__" -delete
  find "${@:-.}" -depth -type d -name ".mypy_cache" -exec rm -r "{}" +
  find "${@:-.}" -depth -type d -name ".pytest_cache" -exec rm -r "{}" +
}

# Python user paths function
function pyuserpaths() {
  setopt localoptions extendedglob

  # Check for a non-standard install directory.
  local user_base="${PYTHONUSERBASE:-"${HOME}/.local"}"

  local python version site_pkgs
  for python in python2 python3; do
    # Check if command exists
    (( ${+commands[$python]} )) || continue

    # Get minor release version.
    # The patch version is variable length, truncate it.
    version=${(M)${"$($python -V 2>&1)":7}#[^.]##.[^.]##}

    # Add version specific path, if:
    # - it exists in the filesystem
    # - it isn't in $PYTHONPATH already.
    site_pkgs="${user_base}/lib/python${version}/site-packages"
    [[ -d "$site_pkgs" && ! "$PYTHONPATH" =~ (^|:)"$site_pkgs"(:|$) ]] || continue
    export PYTHONPATH="${site_pkgs}${PYTHONPATH+":${PYTHONPATH}"}"
  done
}

# Python virtual environment utilities
: ${PYTHON_VENV_NAME:=venv}

# Activate virtual environment
function vrun() {
  local name="${1:-$PYTHON_VENV_NAME}"
  local venvpath="${name:P}"

  if [[ ! -d "$venvpath" ]]; then
    echo >&2 "Error: no such venv in current directory: $name"
    return 1
  fi

  if [[ ! -f "${venvpath}/bin/activate" ]]; then
    echo >&2 "Error: '${name}' is not a proper virtual environment"
    return 1
  fi

  . "${venvpath}/bin/activate" || return $?
  echo "Activated virtual environment ${name}"
}

# Create virtual environment
function mkv() {
  local name="${1:-$PYTHON_VENV_NAME}"
  local venvpath="${name:P}"

  python3 -m venv "${name}" || return
  echo >&2 "Created venv in '${venvpath}'"
  vrun "${name}"
}

# Auto-activate virtual environment on directory change
if [[ "$PYTHON_AUTO_VRUN" == "true" ]]; then
  function auto_vrun() {
    # deactivate if we're on a different dir than VIRTUAL_ENV states
    # we don't deactivate subdirectories!
    if (( $+functions[deactivate] )) && [[ $PWD != ${VIRTUAL_ENV:h}* ]]; then
      deactivate > /dev/null 2>&1
    fi

    if [[ $PWD != ${VIRTUAL_ENV:h} ]]; then
      for _file in "${PYTHON_VENV_NAME}"*/bin/activate(N.); do
        # make sure we're not in a venv already
        (( $+functions[deactivate] )) && deactivate > /dev/null 2>&1
        source $_file > /dev/null 2>&1
        break
      done
    fi
  }
  add-zsh-hook chpwd auto_vrun
  auto_vrun
fi

############################ Network & File Transfer ############################

# rsync shortcuts
alias rsync-copy="rsync -avz --progress -h"
alias rsync-move="rsync -avz --progress -h --remove-source-files"
alias rsync-update="rsync -avzu --progress -h"
alias rsync-synchronize="rsync -avzu --delete --progress -h"

# SSH host completion setup
_ssh_configfile="$HOME/.ssh/config"
if [[ -f "$_ssh_configfile" ]]; then
  _ssh_hosts=($(
    egrep '^Host.*' "$_ssh_configfile" |\
    awk '{for (i=2; i<=NF; i++) print $i}' |\
    sort |\
    uniq |\
    grep -v '^*' |\
    sed -e 's/\.*\*$//'
  ))
  zstyle ':completion:*:hosts' hosts $_ssh_hosts
  unset _ssh_hosts
fi
unset _ssh_configfile

# SSH key management functions
function ssh_rmhkey {
  local ssh_configfile="$HOME/.ssh/config"
  local ssh_host="$1"
  if [[ -z "$ssh_host" ]]; then return; fi
  ssh-keygen -R $(grep -A10 "$ssh_host" "$ssh_configfile" | grep -i HostName | head -n 1 | awk '{print $2}')
}
compctl -k hosts ssh_rmhkey

function ssh_load_key() {
  local key="$1"
  if [[ -z "$key" ]]; then return; fi
  local keyfile="$HOME/.ssh/$key"
  local keysig=$(ssh-keygen -l -f "$keyfile")
  if ( ! ssh-add -l | grep -q "$keysig" ); then
    ssh-add "$keyfile"
  fi
}

function ssh_unload_key {
  local key="$1"
  if [[ -z "$key" ]]; then return; fi
  local keyfile="$HOME/.ssh/$key"
  local keysig=$(ssh-keygen -l -f "$keyfile")
  if ( ssh-add -l | grep -q "$keysig" ); then
    ssh-add -d "$keyfile"
  fi
}
